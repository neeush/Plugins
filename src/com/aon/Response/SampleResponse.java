package com.aon.Response;

import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONObject;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class SampleResponse extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	
	
	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	
	public String[] getFilteredServices() {
		return new String[] { "/p8/getDependentAttributeInfo" };
	}

	
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			HttpServletRequest request, JSONObject jsonResponse) throws Exception {
		
		
		System.out.println("before123"+jsonResponse.toString());
		
		Random rand = new Random();

		int  n = rand.nextInt(10000) + 1;
		
		String u = n+"";
		
JSONObject jsonObj = (JSONObject) jsonResponse;
		
		JSONArray criterias= (JSONArray)jsonObj.get("criterias");
		
	/*	JSONObject template = (JSONObject)criterias.get(0);
		template.put("value", "Ravi Teja");*/
		
		
		
		for(int i=0;i<criterias.size();i++)
		{
			
			JSONObject obj = (JSONObject)criterias.get(i);
			
			if(obj.get("name").equals("GEOPRefNumber"))
			{
				if(obj.get("value").equals("") )
				{
					obj.put("value", u);
					System.out.println("updated");
				}
				
				System.out.println("inside");
				break;
			}
		}
		
		
		System.out.println("after123"+jsonResponse.toString());
		
		/*JSONObject jsonObj = (JSONObject) jsonResponse.get("json");
		
		JSONArray criterias= (JSONArray)jsonObj.get("propertiesOptions");
		
		JSONObject data = (JSONObject)criterias.get(0);
		
		data.put("defaultValue", n);
		
		System.out.println("after123"+jsonResponse.toString());*/
		
		
		
		/*JSONObject jsonObj = (JSONObject) jsonResponse;
		
		JSONArray criterias= (JSONArray)jsonObj.get("criterias");
		
		JSONObject template = (JSONObject)criterias.get(0);
		template.put("value", "Ravi Teja");
		
		
		
		for(int i=0;i<criterias.size();i++)
		{
			
			JSONObject obj = (JSONObject)criterias.get(i);
			
			if(obj.get("name").equals("Description"))
			{
				obj.put("value", "Ravi Teja");
				obj.put("readOnly", "true");
				
				System.out.println("inside");
				break;
			}
		}
		
		System.out.println("After123"+jsonResponse.toString());*/
		
		/*JSONObject jsonObj = (JSONObject) jsonResponse;
		
		JSONArray messages= (JSONArray)jsonObj.get("messages");
		
		JSONObject text = (JSONObject)messages.get(0);
		
		text.put("text", "The search returned Ravi Teja Vadapalli");
		
		messages.add(text);
		
		JSONArray rows= (JSONArray)jsonObj.get("rows");
		for(int i=0;i<rows.size();i++)
		{
			JSONObject template = (JSONObject)rows.get(i);
			template.put("template", "Ravi Teja");
			
//			JSONObject templateLabel = new JSONObject();
			template.put("template_label", "Ravi Teja");
			
//			rows.add(template);
		}
//		rows.add(templateLabel);
		
		System.out.println("After123"+jsonResponse.toString());*/
	}
}
